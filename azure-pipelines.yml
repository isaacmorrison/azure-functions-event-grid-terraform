trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  LOCATION: westus
  # Uncomment & change this to something more unique before running
  PREFIX: ayasamp

jobs:
- job: SetupAzureTFBackend
  displayName: Setup TFState Azure Backend
  dependsOn: []
  steps:
  - task: AzureCLI@2
    displayName: Create resource group
    inputs:
      azureSubscription: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az group create --name  $(PREFIX)-storage-rg --location $(LOCATION) --tags sample=azure-functions-event-grid-terraform'
  - task: AzureCLI@2
    displayName: Create tfstate storage account
    inputs:
      azureSubscription: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az storage account create --resource-group  $(PREFIX)-storage-rg --name $(PREFIX)tfstor1 --kind StorageV2 --tags sample=azure-functions-event-grid-terraform'

  - task: AzureCLI@2
    displayName: Create tfstate container
    inputs:
      azureSubscription: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az storage container create --name tfstate --account-name $(PREFIX)tfstor'

- job: Deploy
  displayName: Build and Deploy
  dependsOn: 
  - SetupAzureTFBackend
  steps:
  - task: UseDotNet@2
    displayName: 'Target .NET Core 3.1'
    inputs:
      packageType: sdk
      version: 3.1.x
      
  # - task: TerraformInstaller@0
  #   displayName: 'Install Terraform'
  #   inputs:
  #     terraformVersion: '0.12.20'

  - task: DotNetCoreCLI@2
    displayName: 'Build Function App'
    inputs:
      command: 'build'
      projects: '$(Build.SourcesDirectory)/src/**/*.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy Azure TF backend file to primary TF dir
    inputs:
      SourceFolder: 'infrastructure/terraform_backend'
      Contents: '**'
      TargetFolder: 'infrastructure/terraform'
      OverWrite: true

  - task: TerraformTaskV3@3
    displayName: 'tf init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      backendServiceArm: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'
      backendAzureRmResourceGroupName: '$(PREFIX)-storage-rg'
      backendAzureRmStorageAccountName: '$(PREFIX)tfstor'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: 'terraform.tfstate'

  - task: TerraformTaskV3@3
    displayName: 'TF üçî "top bun" (tf apply -target module.functions -var "prefix=$(PREFIX)" -var "location=$(LOCATION)")'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      commandOptions: '-target module.functions -var "prefix=$(PREFIX)" -var "location=$(LOCATION)"'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      environmentServiceNameAzureRM: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'

  - task: AzureFunctionApp@1
    displayName: 'ü•ì Deploy Function App'
    inputs:
      azureSubscription: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'
      appType: 'functionApp'
      appName: '$(PREFIX)-fxn'
      package: '$(Build.ArtifactStagingDirectory)'
      deploymentMethod: 'auto'

  - task: TerraformTaskV3@3
    displayName: 'TF üçî "bottom bun" (tf apply -var "prefix=$(PREFIX)" -var "location=$(LOCATION)")'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      commandOptions: '-var "prefix=$(PREFIX)" -var "location=$(LOCATION)"'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
      environmentServiceNameAzureRM: 'Aya-DevOps-PoC-Ent-Subscription-service-connection'